<?php
/**
 * 2007-2022 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2022 PrestaShop SA
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 *  International Registered Trademark & Property of PrestaShop SA
 */

/**
 * Class AdminEtsAmFormController
 * @property Ets_affiliatemarketing $module;
 */
class AdminEtsAmFormController extends ModuleAdminController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Ets_affiliatemarketing::registerPlugins();
    }

    public function _renderList($tabActive = null)
    {
        if(!$tabActive)
            $tabActive = Tools::getValue('tabActive');
        $defined = new EtsAffDefine();
        $func = 'def_' . $tabActive;
        $config_data = $defined->{$func}();
        $submit_success ='';
        if (isset($config_data['form'])) {
            if (Tools::isSubmit('save' . $this->module->name)) {
                $this->_postProcess($tabActive);
                $submit_success = $this->module->displayConfirmation($this->l('Configuration saved'));
            }
            $params = array(
                'config' => $tabActive,
            );
            $this->_renderForm($params);
        }
        $this->context->smarty->assign($this->module->getAssign($tabActive));
        return ($this->module->_errors ? $this->module->displayError($this->module->_errors) : $submit_success).$this->module->display(_PS_MODULE_DIR_.$this->module->name.DIRECTORY_SEPARATOR.$this->module->name.'.php', 'admin_form.tpl');
    }
    /**
     * @param $params
     * @return bool
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function _renderForm($params)
    {
        if (!$params || !isset($params['config'])) {
            return false;
        }
        $defined = new EtsAffDefine();
        $func_config = 'def_' . $params['config'];
        $configForm = $defined->{$func_config}();
        $fields_form = array();
        $fields_form['form'] = $configForm['form'];
        $controller = ($controller = Tools::getValue('controller')) && Validate::isControllerName($controller) ? $controller :"";
        if (!empty($fields_form['form']['buttons'])) {
            $fields_form['form']['buttons']['back']['href'] = $this->context->link->getAdminLink($controller) . (($tab = Tools::getValue('tabActive', false)) && Validate::isCleanHtml($tab) ? '&tabActive=' . $tab : '');
        }
        $configs = $configForm['config'];
        if ($configs) {
            foreach ($configs as $key => $config) {
                $config_fields = array(
                    'name' => $key,
                    'type' => $config['type'],
                    'label' => $config['label'],
                    'desc' => isset($config['desc']) ? $config['desc'] : false,
                    'required' => isset($config['required']) && $config['required'] ? true : false,
                    'showrequired' => isset($config['showrequired']) ? $config['showrequired']:false,
                    'autoload_rte' => isset($config['autoload_rte']) && $config['autoload_rte'] ? true : false,
                    'options' => isset($config['options']) && $config['options'] ? $config['options'] : array(),
                    'multiple' => isset($config['multiple']) && $config['multiple'],
                    'form_group_class' => isset($config['form_group_class']) ? $config['form_group_class'] : false,
                    'values' => $config['type'] == 'switch' ? array(
                        array(
                            'id' => 'active_on',
                            'value' => 1,
                            'label' => $this->l('Yes')
                        ),
                        array(
                            'id' => 'active_off',
                            'value' => 0,
                            'label' => $this->l('No')
                        )
                    ) : (isset($config['values']) && $config['values'] ? $config['values'] : false),
                    'lang' => isset($config['lang']) ? $config['lang'] : false,
                    'col' => isset($config['col']) ? $config['col'] : '9',
                    'rows' => isset($config['rows']) ? $config['rows'] : '3',
                    'group' => isset($config['group']) ? $config['group'] : false,
                    'class' => isset($config['class']) ? $config['class'] : false,
                    'is_image' => isset($config['is_image']) ? $config['is_image'] : false,
                    'size' => isset($config['size']) ? $config['size'] : false,
                    'caption_before' => isset($config['caption_before']) ? $config['caption_before'] : false,
                    'divider_before' => isset($config['divider_before']) ? $config['divider_before'] : false,
                    'default' => isset($config['default']) && $config['default'] ? $config['default'] : false,
                    'fill' => isset($config['fill']) && $config['fill'] ? $config['fill'] : false,
                    'id' => isset($config['id']) && $config['id'] ? $config['id'] : '',
                    'items' => isset($config['items']) && $config['items'] ? $config['items'] : array(),
                    '_currencies' => isset($config['_currencies']) && $config['_currencies'] ? $config['_currencies'] : array(),
                    'default_currency' => isset($config['default_currency']) && $config['default_currency'] ? $config['default_currency'] : array(),
                );
                if (isset($config['tree']))
                    $config_fields['tree'] = $config['tree'];
                if (!empty($config['suffix']))
                    $config_fields = $config_fields + array('suffix' => $config['suffix']);
                if (!empty($config['cols']))
                    $config_fields = $config_fields + array('cols' => $config['cols']);
                if (!empty($config['rows']))
                    $config_fields = $config_fields + array('rows' => $config['rows']);
                if (!empty($config['img_dir']))
                    $config_fields = $config_fields + array('img_dir' => $config['img_dir']);
                if (!empty($config['group']))
                    $config_fields = $config_fields + array('group' => $config['group']);
                if (!$config_fields['multiple']) {
                    unset($config_fields['multiple']);
                } elseif ($config['type'] == 'select' && stripos($config_fields['name'], '[]') === false) {
                    $config_fields['name'] .= '[]';
                }
                array_push($fields_form['form']['input'], $config_fields);
            }
        }
        $language = new Language((int)Configuration::get('PS_LANG_DEFAULT'));
        $helper = new HelperForm();
        $helper->show_toolbar = true;
        $helper->toolbar_scroll = true;
        $helper->table = 'module';
        $helper->default_form_language = $language->id;
        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;
        $helper->module = $this->module;
        $helper->identifier = 'id_module';
        $helper->submit_action = 'save' . $this->module->name;
        $helper->currentIndex = $this->context->link->getAdminLink($controller, false) . $this->getUrlParams();
        $helper->token = Tools::getAdminTokenLite($controller);
        $helper->show_cancel_button = false;
        $fields = array();
        $languages = Language::getLanguages(false);
        if (Tools::isSubmit('save' . $this->module->name)) {
            if ($configs) {
                foreach ($configs as $key => $config) {
                    if (isset($config['lang']) && $config['lang']) {
                        foreach ($languages as $l) {
                            $fields[$key][$l['id_lang']] = Tools::getValue($key . '_' . $l['id_lang'], isset($config['default']) ? $config['default'] : '');
                        }
                    } elseif ($config['type'] == 'select' && isset($config['multiple']) && $config['multiple']) {
                        $fields[$key . ($config['type'] == 'select' ? '[]' : '')] = Tools::getValue($key, array());
                    } elseif ($config['type'] == 'ets_checkbox_group') {
                        $fields[$key] = Tools::getValue($key, array()) ? implode(',', Tools::getValue($key, array())):'';
                    } elseif ($config['type'] == 'file') {
                        $fields[$key] = $this->getFields(false, $key, $config);
                    } else {
                        $fields[$key] = Tools::getValue($key, isset($config['default']) ? $config['default'] : '');
                    }
                }
            }
        } else {
            if ($configs) {
                $obj = !empty($params['obj']) ? $params['obj'] : false;
                foreach ($configs as $key => $config) {
                    if (isset($config['lang']) && $config['lang']) {
                        foreach ($languages as $l) {
                            $fields[$key][$l['id_lang']] = $this->getFields($obj, $key, $config, (int)$l['id_lang']);
                        }
                    } elseif ($config['type'] == 'select' && isset($config['multiple']) && $config['multiple']) {
                        $fields[$key . ($config['type'] == 'select' ? '[]' : '')] = ($result = $this->getFields($obj, $key, $config)) != '' ? explode(',', $result) : array();
                    } else {
                        $fields[$key] = $this->getFields($obj, $key, $config);
                    }
                }
            }
        }
        $helper->tpl_vars = array(
            'table' => isset($fields_form['form']['name']) && $fields_form['form']['name'] ? $fields_form['form']['name'] : null,
            'base_url' => $this->context->shop->getBaseURL(),
            'language' => array(
                'id_lang' => $language->id,
                'iso_code' => $language->iso_code
            ),
            'fields_value' => $fields,
            'languages' => $this->context->controller->getLanguages(),
            'id_language' => $this->context->language->id,
            'path_banner' => _PS_ETS_EAM_IMG_
        );
        $fields_form['form']['submit'] = array(
            'title' => $this->l('Save'),
            'class' => 'btn btn-default pull-right'
        );
        $this->module->_html .= $helper->generateForm(array($fields_form));
    }
    /**
     * @return string
     */
    public function getUrlParams()
    {
        $params = '';
        if (($currentTabs = Tools::getValue('tabActive', false)) && Validate::isCleanHtml($currentTabs))
            $params .= '&tabActive=' . $currentTabs;
        if (($subTab = Tools::getValue('subTab', false)) && Validate::isCleanHtml($subTab))
            $params .= '&subTab=' . $subTab;
        return $params;
    }
    /**
     * @param $obj
     * @param $key
     * @param $config
     * @param bool $id_lang
     * @return bool|int|null|string
     */
    public function getFields($obj, $key, $config, $id_lang = false)
    {
        $default_value = false;
        if (isset($config['default']) && $config['default']) {
            $default_value = $config['default'] === true ? 1 : $config['default'];
        }
        if ($obj) {
            if (!$obj->id)
                return (isset($config['default']) ? $config['default'] : null);
            elseif ($id_lang)
                return !empty($obj->{$key}) && !empty($obj->{$key}[$id_lang]) ? $obj->{$key}[$id_lang] : '';
            else
                return $obj->$key;
        } else {
            if ($id_lang)
                return ($value = Configuration::get($key, $id_lang)) || (Configuration::get($key, $id_lang) !== false && Configuration::get($key, $id_lang) == 0) ? $value : $default_value;
            else
                return ($value = Configuration::get($key)) || (Configuration::get($key, $id_lang) !== false && Configuration::get($key, $id_lang) == 0) ? $value : $default_value;
        }
    }
    /**
     * @return void
     * @throws PrestaShopException
     */
    public function _postProcess($tabActive = null)
    {
        if (Tools::isSubmit('save' . $this->module->name)) {
            if(!$tabActive)
                $tabActive = Tools::getValue('tabActive', 'general_settings');
            if (!$this->module->_errors && Validate::isCleanHtml($tabActive)) {
                $defined = new EtsAffDefine();
                $func = 'def_' . $tabActive;
                if (method_exists($defined, $func)) {
                    $tab_fields = $defined->{$func}();
                    if (isset($tab_fields['config']) && !empty($tab_fields['config'])) {
                        $params = array(
                            'tab' => $tabActive,
                            'configs' => $tab_fields['config']
                        );
                        $this->_processSave($params);
                    }
                }
            }
        }
    }
    /**
     * @param $params
     * @return bool
     * @throws PrestaShopException
     */
    private function _processSave($params)
    {
        if (empty($params)) {
            return false;
        }
        $languages = Language::getLanguages(false);
        $id_lang_default = (int)Configuration::get('PS_LANG_DEFAULT');
        $configs = array();
        if (isset($params['configs']) && $params['configs']) {
            $configs = $params['configs'];
        }
        $obj = isset($params['obj']) ? $params['obj'] : false;
        if ($configs) {
            foreach ($configs as $key => $config) {
                if (isset($config['lang']) && $config['lang']) {
                    $val_lang_default = Tools::getValue($key . '_' . $id_lang_default);
                    if (isset($config['required']) && $config['required'] && $config['type'] != 'switch' && trim($val_lang_default) == '') {
                        $this->module->_errors[] = sprintf($this->l('%s is required'), $config['label']);
                    } elseif ($val_lang_default && !Validate::isCleanHtml($val_lang_default))
                        $this->module->_errors[] = sprintf($this->l('%s is not valid'), $config['label']);
                    else {
                        foreach ($languages as $lang) {
                            $val_lang = Tools::getValue($key . '_' . $lang['id_lang']);
                            if ($val_lang && !Validate::isCleanHtml($val_lang))
                                $this->module->_errors[] = sprintf($this->l('%s is not valid in %s'), $config['label'], $lang['iso_code']);
                        }
                    }
                } else {
                    $val = Tools::getValue($key);
                    if (isset($config['required']) && $config['required'] && $config['type'] != 'switch' && !$val) {
                        $this->module->_errors[] = sprintf($this->l('%s is required'), $config['label']);
                    } elseif (!is_array($val) && $val!='' && isset($config['validate']) && method_exists('Validate', $config['validate'])) {
                        if ($key !== 'ETS_AM_LOYALTY_AMOUNT' && $key !== 'ETS_AM_LOYALTY_AMOUNT' && $key !== 'ETS_AM_LOYALTY_BASE_ON') {
                            $validate = $config['validate'];
                            if (trim($val) && !Validate::$validate(trim($val))) {
                                $this->module->_errors[] = sprintf($this->l('%s is invalid'), $config['label']);
                            }
                            elseif(($validate=='isUnsignedInt' || $validate=='isUnsignedFloat') && $val<=0)
                            {
                                $this->module->_errors[] = sprintf($this->l('%s is invalid'), $config['label']);
                            }
                            unset($validate);
                        }
                    } elseif (!is_array($val) && !Validate::isCleanHtml(trim($val))) {
                        if ($key !== 'ETS_AM_LOYALTY_AMOUNT' && $key !== 'ETS_AM_LOYALTY_AMOUNT' && $key !== 'ETS_AM_LOYALTY_BASE_ON')
                            $this->module->_errors[] = sprintf($this->l('%s is invalid'), $config['label']);
                    } elseif (is_array($val) && !Ets_affiliatemarketing::validateArray($val))
                        $this->module->_errors[] = sprintf($this->l('%s is invalid'), $config['label']);
                    if ($key == 'ETS_AM_LOYALTY_TIME') {
                        if ($val !== 'ALL') {
                            $from_date = Tools::getValue('ETS_AM_LOYALTY_TIME_FROM');
                            if ($from_date && !Validate::isDate($from_date))
                                $this->module->_errors[] = $this->l('From date is not valid');
                            $to_date = Tools::getValue('ETS_AM_LOYALTY_TIME_TO');
                            if ($to_date && !Validate::isDate($to_date))
                                $this->module->_errors[] = $this->l('To date is not valid');
                            if ($from_date && $to_date) {
                                if (date(strtotime($from_date)) > date(strtotime($to_date))) {
                                    $this->module->_errors[] = $this->l('From date must be smaller than To date');
                                }
                            } else {
                                $this->module->_errors[] = $this->l('From date and To date must be fill');
                            }
                        }
                    }
                    if ($key == 'ETS_AM_AFF_OFFER_VOUCHER') {
                        if ($val) {
                            $this->validatePromoCode(EAM_AM_AFFILIATE_REWARD);
                        }
                    }
                    if ($key == 'ETS_AM_REF_OFFER_VOUCHER') {
                        if ($val) {
                            $this->validatePromoCode(EAM_AM_REF_REWARD);
                        }
                    }
                    if ($key == 'ETS_AM_WAITING_STATUS') {
                        $waiting_states = Tools::getValue('ETS_AM_WAITING_STATUS', array());
                        $validated_states = Tools::getValue('ETS_AM_VALIDATED_STATUS', array());
                        $canceled_states = Tools::getValue('ETS_AM_CANCELED_STATUS', array());
                        if (!Ets_affiliatemarketing::validateArray($waiting_states) || !Ets_affiliatemarketing::validateArray($validated_states) || !Ets_affiliatemarketing::validateArray($canceled_states))
                            $this->module->_errors[] = $this->l('Status of reward should be unique in 3 cases: Awaiting, Approved and Canceled');
                        else {
                            $dublicate_states1 = array_intersect($waiting_states, $validated_states);
                            $dublicate_states2 = array_intersect($waiting_states, $canceled_states);
                            $dublicate_states3 = array_intersect($canceled_states, $validated_states);
                            if ($dublicate_states1 || $dublicate_states2 || $dublicate_states3) {
                                $this->module->_errors[] = $this->l('Status of reward should be unique in 3 cases: Awaiting, Approved and Canceled');
                            }
                        }
                    }
                    if ($config['type'] == 'file') {
                        $file_types = isset($config['file_type']) && $config['file_type'] ? $config['file_type'] : null;
                        $file_size_allow = isset($config['file_size']) && $config['file_size'] ? $config['file_size'] : null;
                        if (isset($_FILES[$key]['tmp_name']) && $_FILES[$key]['error'] <= 0 && $file_types) {
                            if (!Validate::isFileName(str_replace(' ', '_', $_FILES[$key]['name']))) {
                                $this->module->_errors[] = sprintf($this->l('The file name is invalid "%s"'), $_FILES[$key]['name']);
                            } else {
                                $file_data = $_FILES[$key];
                                $file_ext = pathinfo($file_data['name'], PATHINFO_EXTENSION);
                                $file_types = explode(',', $file_types);
                                $file_size = (int)$file_data['size'] / 1024;
                                if (!in_array($file_ext, $file_types)) {
                                    $this->module->_errors[] = sprintf($this->l('The file name "%s" is not in the correct format, accepted formats: %s'), $_FILES[$key]['name'], '.' . trim(implode(', .', $file_types), ', .'));
                                } else if ($file_size > $file_size_allow) {
                                    $this->module->_errors[] = sprintf($this->l('%s is too large. Please upload file less than or equal to %s'), $config['label'], Tools::ps_round($file_size_allow, 2) . 'Mb');
                                }
                            }
                        }
                        if (isset($_FILES[$key]['name']) && $_FILES[$key]['name'] && !Validate::isFileName(str_replace(' ', '_', $_FILES[$key]['name'])))
                            $this->module->_errors[] = sprintf($this->l('The file name "%s" is invalid'), $_FILES[$key]['name']);
                    }
                    if (($key == 'ETS_AM_LOYALTY_BASE_ON') && ($BASE_ON = Tools::getValue($key))) {
                        if ($BASE_ON == 'FIXED' || $BASE_ON == 'SPC_FIXED') {
                            $amount = Tools::getValue('ETS_AM_LOYALTY_AMOUNT');
                            if (!$amount) {
                                $this->module->_errors[] = $this->l('Amount field is required');
                            } elseif (!Validate::isUnsignedFloat($amount)) {
                                $this->module->_errors[] = $this->l('Amount must be an unsigned number');
                            }
                        } else {
                            $percent = Tools::getValue('ETS_AM_LOYALTY_GEN_PERCENT');
                            if ($percent == '') {
                                $this->module->_errors[] = $this->l('Percentage field is required');
                            } elseif (!Validate::isUnsignedFloat($percent)) {
                                $this->module->_errors[] = $this->l('Percentage must be an unsigned number');
                            } elseif ($percent <= 0 || $percent > 100) {
                                $this->module->_errors[] = $this->l('Percentage is not valid');
                            }
                        }
                    }
                    if($key=='ETS_AM_LOY_CAT_TYPE' && ($loy_cat_type = Tools::getValue($key)) && $loy_cat_type=='SPECIFIC')
                    {
                        $ETS_AM_LOYALTY_CATEGORIES = Tools::getValue('ETS_AM_LOYALTY_CATEGORIES');
                        if(!$ETS_AM_LOYALTY_CATEGORIES || !Ets_affiliatemarketing::validateArray($ETS_AM_LOYALTY_CATEGORIES,'isInt'))
                        {
                            $this->module->_errors[] = $this->l('Categories include products in subcategories is required');
                        }
                    }
                    if($key=='ETS_AM_AFF_CAT_TYPE' && ($aff_cat_type = Tools::getValue('ETS_AM_AFF_CAT_TYPE')) && $aff_cat_type=='SPECIFIC')
                    {
                        $ETS_AM_AFF_CATEGORIES = Tools::getValue('ETS_AM_AFF_CATEGORIES');
                        if(!$ETS_AM_AFF_CATEGORIES || !Ets_affiliatemarketing::validateArray($ETS_AM_AFF_CATEGORIES,'isInt'))
                        {
                            $this->module->_errors[] = $this->l('Categories is required');
                        }
                    }
                }
            }
        }
        $errors_validate = self::validateDataConfig($params['tab']);
        $this->module->_errors = array_merge($this->module->_errors, $errors_validate);
        $ETS_AM_REF_SPONSOR_COST_PERCENT = Tools::getValue('ETS_AM_REF_SPONSOR_COST_PERCENT');
        if ($ETS_AM_REF_SPONSOR_COST_PERCENT && Validate::isUnsignedFloat($ETS_AM_REF_SPONSOR_COST_PERCENT) && ($ETS_AM_REF_SPONSOR_COST_PERCENT < 0 || $ETS_AM_REF_SPONSOR_COST_PERCENT > 100))
            $this->module->_errors[] = $this->l('Sponsor cost is not valid');
        $ETS_AM_REF_SPONSOR_COST_LEVEL_1 = Tools::getValue('ETS_AM_REF_SPONSOR_COST_LEVEL_1');
        if ($ETS_AM_REF_SPONSOR_COST_LEVEL_1 && Validate::isUnsignedFloat($ETS_AM_REF_SPONSOR_COST_LEVEL_1) && ($ETS_AM_REF_SPONSOR_COST_LEVEL_1 < 0 || $ETS_AM_REF_SPONSOR_COST_LEVEL_1 > 100))
            $this->module->_errors[] = $this->l('Level 1 is not valid');
        $ETS_AM_REF_ENABLED_MULTI_LEVEL = (int)Tools::getValue('ETS_AM_REF_ENABLED_MULTI_LEVEL');
        if ($ETS_AM_REF_ENABLED_MULTI_LEVEL) {
            $level_count = 2;
            $quit = false;
            $exists = false;
            while ($quit == false) {
                $level_data = Tools::getValue('ETS_AM_REF_SPONSOR_COST_LEVEL_' . $level_count, false);
                if ($level_data !== false) {
                    if (trim($level_data) == '')
                        $this->module->_errors[] = sprintf($this->l('Level %d is required'), $level_count);
                    elseif ((!Validate::isUnsignedFloat($level_data) || $level_data < 0 || $level_data > 100)) {
                        $this->module->_errors[] = sprintf($this->l('Level %d is not valid'), $level_count);
                    }
                    $exists = true;
                    $level_count++;
                } else {
                    $quit = true;
                }
            }
            if (!$exists)
                $this->module->_errors[] = $this->l('Level 2 is required');
        }
        $ETS_AM_REF_SPONSOR_COST_LEVEL_LOWER = Tools::getValue('ETS_AM_REF_SPONSOR_COST_LEVEL_LOWER');
        if ($ETS_AM_REF_SPONSOR_COST_LEVEL_LOWER && Validate::isUnsignedFloat($ETS_AM_REF_SPONSOR_COST_LEVEL_LOWER) && ($ETS_AM_REF_SPONSOR_COST_LEVEL_LOWER <= 0 || $ETS_AM_REF_SPONSOR_COST_LEVEL_LOWER > 100))
            $this->module->_errors[] = $this->l('Lower levels are not valid');
        $ETS_AM_AFF_DEFAULT_PERCENTAGE = Tools::getValue('ETS_AM_AFF_DEFAULT_PERCENTAGE');
        if ($ETS_AM_AFF_DEFAULT_PERCENTAGE && Validate::isUnsignedFloat($ETS_AM_AFF_DEFAULT_PERCENTAGE) && ($ETS_AM_AFF_DEFAULT_PERCENTAGE <= 0 || $ETS_AM_AFF_DEFAULT_PERCENTAGE > 100))
            $this->module->_errors[] = $this->l('Percentage is not valid');
        if (!$this->module->_errors) {
            if ($configs) {
                foreach ($configs as $key => $config) {
                    if (isset($config['lang']) && $config['lang']) {
                        $values = array();
                        $val_lang_default = trim(Tools::getValue($key . '_' . $id_lang_default));
                        foreach ($languages as $lang) {
                            if ($config['type'] == 'switch') {
                                $val = (int)trim(Tools::getValue($key . '_' . $lang['id_lang']));
                                $values[$lang['id_lang']] = $val ? 1 : 0;
                            } else {
                                $val_lang = trim(Tools::getValue($key . '_' . $lang['id_lang']));
                                $values[$lang['id_lang']] = $val_lang && Validate::isCleanHtml($val_lang) ? $val_lang : (Validate::isCleanHtml($val_lang_default) ? $val_lang_default : '');
                            }
                        }
                        $this->module->setFields($obj, $key, $values, true);
                    } else {
                        if ($config['type'] == 'switch') {
                            $val = (int)trim(Tools::getValue($key));
                            $this->module->setFields($obj, $key, $val ? 1 : 0, true);
                        } elseif ($config['type'] == 'select' && isset($config['multiple']) && $config['multiple']) {
                            $val = Tools::getValue($key);
                            if ($val && Ets_affiliatemarketing::validateArray($val))
                                $this->module->setFields($obj, $key, implode(',', $val));
                        } elseif ($config['type'] == 'categories_tree' || $config['type'] == 'categories') {
                            $val = Tools::getValue($key);
                            if ($val && Ets_affiliatemarketing::validateArray($val))
                                Configuration::updateValue($key, $val ? implode(',', $val) : '');
                        } elseif ($config['type'] == 'ets_checkbox_group') {
                            if (Tools::getIsset($key)) {
                                $val = ($getVal = Tools::getValue($key, array())) && Ets_affiliatemarketing::validateArray($getVal) && !in_array('ALL', $getVal) && ($result = implode(',', $getVal)) != 'ALL' ? $result : 'ALL';
                                $this->module->setFields($obj, $key, $val);
                            } else {
                                $this->module->setFields($obj, $key, null);
                            }
                        } elseif ($config['type'] == 'ets_radio_group') {
                            if (Tools::getIsset($key)) {
                                $val = Tools::getValue($key, '');
                                if (Validate::isCleanHtml($val))
                                    $this->module->setFields($obj, $key, $val);
                            } else {
                                $this->module->setFields($obj, $key, null);
                            }
                        } elseif ($config['type'] == 'text_search_prd') {
                            if (Tools::getIsset($key)) {
                                $val = Tools::getValue($key, '');
                                if (Validate::isCleanHtml($val))
                                    $this->module->setFields($obj, $key, $val);
                            } else {
                                $this->module->setFields($obj, $key, null);
                            }
                        } elseif ($config['type'] == 'file' && isset($config['is_image']) && $config['is_image']) {
                            $path_img = $this->_uploadImage($key);
                            if ($path_img) {
                                $this->module->setFields($obj, $key, $path_img);
                            }
                        } elseif ($key == 'ETS_AM_LOYALTY_CATEGORIES') {
                            $key_values = Tools::getValue($key);
                            if ($key_values == 'ALL') {
                                $this->module->setFields($obj, $key, 'ALL');
                            } else {
                                if (is_array($key_values) && !empty($key_values)) {
                                    if (Ets_affiliatemarketing::validateArray($key_values))
                                        $this->module->setFields($obj, $key,  $key_values ? implode(',', $key_values):'');
                                } else {
                                    $this->module->setFields($obj, $key, 'ALL');
                                }
                            }
                        } elseif ($key != 'position') {
                            $field_value = Tools::getValue($key);
                            if ($field_value !== false) {
                                if ($key == 'ETS_AM_REF_SPONSOR_COST_LEVEL_1') {
                                    self::saveSponsorLevel();
                                }
                                if (!is_array($field_value)) {
                                    $field_value = Validate::isCleanHtml($field_value) ? trim($field_value) : '';
                                } else {
                                    $field_value = Ets_affiliatemarketing::validateArray($field_value) && $field_value ? implode(',', $field_value) : '';
                                }
                                $this->module->setFields($obj, $key, $field_value, true);
                            }
                        }
                    }
                }
                if ($params['tab'] == 'rs_program_voucher') {
                    $cart_rules = Ets_Voucher::getCartRuleSAddByCustomerSeller();
                    if ($cart_rules)
                        foreach ($cart_rules as $cart_rule)
                            $this->module->saveCartRule($cart_rule['id_cart_rule']);
                }
            }
        }
        //custom multishop.
        if (!count($this->module->_errors) && isset($obj->id_shop)) {
            $shops = Shop::getShops(false);
            $result = true;
            if (Shop::CONTEXT_ALL == Shop::getContext() && count($shops) > 1 && !$obj->id) {
                foreach ($shops as $shop) {
                    $obj->id_shop = (int)$shop['id_shop'];
                    $obj->position = (int)$obj->maxVal($shop['id_shop']) + 1;
                    $result &= $obj->add();
                }
            } else {
                if (!$obj->id)
                    $obj->position = (int)$obj->maxVal() + 1;
                $result &= ($obj->id && $obj->update() || !$obj->id && $obj->add());
            }
            if ($result) {
                $this->module->_clearCache('*');
                Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true) . '&conf=4&configure=' . $this->name . '&tab_module=' . $this->tab . '&module_name=' . $this->name . (!empty($params['tab']) ? '&tabActive=' . $params['tab'] : '') . (!empty($params['list_id']) ? '&id_' . $params['list_id'] . '=' . $obj->id . '&update' . $params['list_id'] : ''));
            }
        }
    }
    /**
     * Validate promo code
     *
     * @param $program
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    protected function validatePromoCode($program)
    {
        if ($program == EAM_AM_AFFILIATE_REWARD) {
            $type = Tools::getValue('ETS_AM_AFF_VOUCHER_TYPE');
            $voucherCode = Tools::getValue('ETS_AM_AFF_VOUCHER_CODE');
        } elseif ($program == EAM_AM_REF_REWARD) {
            $type = Tools::getValue('ETS_AM_REF_VOUCHER_TYPE');
            $voucherCode = Tools::getValue('ETS_AM_REF_VOUCHER_CODE');
        } else {
            $type = false;
        }
        if (!$type) {
            $this->module->_errors[] = $this->l('Voucher type field is required.');
            return;
        }
        if ($type == 'FIXED') {
            if (isset($voucherCode) &&  !$voucherCode) {
                $this->module->_errors[] = $this->l('Voucher code is required.');
                return;
            }
            if (!Validate::isGenericName($voucherCode)) {
                $this->module->_errors[] = $this->l('Voucher code is invalid.');
                return;
            }
            $promoId = CartRule::cartRuleExists($voucherCode);
            if ($promoId) {
                if ($cartRule = new CartRule($promoId)) {
                    if (!$cartRule->active) {
                        $this->module->_errors[] = $this->l('Voucher is not active.');
                        return;
                    }
                }
            } else {
                $this->module->_errors[] = $this->l('Voucher does not exists.');
                return;
            }
        }
    }
    public static function validateDataConfig($tab)
    {
        $trans = Module::getInstanceByName('ets_affiliatemarketing')->getTranslates();
        $errors = array();
        if ($tab == 'general_settings') {
            $ETS_AM_REWARD_DISPLAY = Tools::getValue('ETS_AM_REWARD_DISPLAY');
            if ($ETS_AM_REWARD_DISPLAY == 'point') {
                $rewardUnit = Tools::getValue('ETS_AM_REWARD_UNIT_LABEL_' . (int)Configuration::get('PS_LANG_DEFAULT'), false);
                if (!$rewardUnit || !Validate::isCleanHtml($rewardUnit)) {
                    $errors[] = $trans['reward_unit_label_required'];
                }
                $conver = Tools::getValue('ETS_AM_CONVERSION', false);
                if (!$conver || !Validate::isCleanHtml($conver)) {
                    $errors[] = $trans['coversion_rate_required'];
                }
            }
        } elseif ($tab == 'general_email') {
            $ETS_AM_ENABLED_EMAIL_CONFIRM_REG = (int)Tools::getValue('ETS_AM_ENABLED_EMAIL_CONFIRM_REG', false);
            $ETS_AM_ENABLED_EMAIL_RES_REG = (int)Tools::getValue('ETS_AM_ENABLED_EMAIL_RES_REG', false);
            if ($ETS_AM_ENABLED_EMAIL_CONFIRM_REG || $ETS_AM_ENABLED_EMAIL_RES_REG) {
                $emailConfirm = Tools::getValue('ETS_AM_EMAILS_CONFIRM', false);
                if (!$emailConfirm || !Validate::isCleanHtml($emailConfirm)) {
                    $errors[] = $trans['email_receive_required'];
                }
            }
        } elseif ($tab == 'loyalty_conditions') {
            $ETS_AM_LOYALTY_ENABLED = (int)Tools::getValue('ETS_AM_LOYALTY_ENABLED', false);
            if ($ETS_AM_LOYALTY_ENABLED) {
                $ETS_AM_LOYALTY_TIME = Tools::getValue('ETS_AM_LOYALTY_TIME', false);
                if ($ETS_AM_LOYALTY_TIME == 'specific') {
                    $loyTimeFrom = Tools::getValue('ETS_AM_LOYALTY_TIME_FROM', false);
                    $loyTimeTo = Tools::getValue('ETS_AM_LOYALTY_TIME_TO', false);
                    if (!$loyTimeFrom || !Validate::isDate($loyTimeFrom) || !$loyTimeTo || !Validate::isDate($loyTimeTo)) {
                        $errors[] = $trans['specific_time_required'];
                    }
                }
                $ETS_AM_LOY_CAT_TYPE = Tools::getValue('ETS_AM_LOY_CAT_TYPE');
                if ($ETS_AM_LOY_CAT_TYPE == 'SPECIFIC') {
                    $loyCate = Tools::getValue('ETS_AM_LOYALTY_CATEGORIES', false);
                    if (!$loyCate) {
                        $errors[] = $trans['categories_required'];
                    } elseif ($loyCate && !Ets_affiliatemarketing::validateArray($loyCate))
                        $errors[] = $trans['categories_valid'];
                }
            }
        } elseif ($tab == 'rs_program_voucher') {
            $ETS_AM_REF_OFFER_VOUCHER = (int)Tools::getValue('ETS_AM_REF_OFFER_VOUCHER', false);
            if ($ETS_AM_REF_OFFER_VOUCHER) {
                $ETS_AM_REF_VOUCHER_TYPE = Tools::getValue('ETS_AM_REF_VOUCHER_TYPE');
                if ($ETS_AM_REF_VOUCHER_TYPE == 'DYNAMIC') {
                    $ETS_AM_REF_APPLY_DISCOUNT = Tools::getValue('ETS_AM_REF_APPLY_DISCOUNT');
                    if ($ETS_AM_REF_APPLY_DISCOUNT == 'PERCENT') {
                        $ETS_AM_REF_REDUCTION_PERCENT = (float)Tools::getValue('ETS_AM_REF_REDUCTION_PERCENT', false);
                        if (!$ETS_AM_REF_REDUCTION_PERCENT) {
                            $errors[] = $trans['discount_percent_required'];
                        }
                    } elseif ($ETS_AM_REF_APPLY_DISCOUNT == 'AMOUNT') {
                        $ETS_AM_REF_REDUCTION_AMOUNT = (float)Tools::getValue('ETS_AM_REF_REDUCTION_AMOUNT', false);
                        if (!$ETS_AM_REF_REDUCTION_AMOUNT) {
                            $errors[] = $trans['amount_required'];
                        }
                    }
                    $ETS_AM_REF_APPLY_DISCOUNT_IN = (float)Tools::getValue('ETS_AM_REF_APPLY_DISCOUNT_IN', false);
                    if (!$ETS_AM_REF_APPLY_DISCOUNT_IN) {
                        $errors[] = $trans['discount_availability_required'];
                    }
                }
            }
            $ETS_AM_SELL_OFFER_VOUCHER = (int)Tools::getValue('ETS_AM_SELL_OFFER_VOUCHER', false);
            if ($ETS_AM_SELL_OFFER_VOUCHER) {
                $ETS_AM_SELL_APPLY_DISCOUNT = Tools::getValue('ETS_AM_SELL_APPLY_DISCOUNT');
                if ($ETS_AM_SELL_APPLY_DISCOUNT == 'PERCENT') {
                    $ETS_AM_SELL_REDUCTION_PERCENT = (float)Tools::getValue('ETS_AM_SELL_REDUCTION_PERCENT', false);
                    $ETS_AM_SELL_APPLY_DISCOUNT_IN = (float)Tools::getValue('ETS_AM_SELL_APPLY_DISCOUNT_IN', false);
                    if (!$ETS_AM_SELL_REDUCTION_PERCENT) {
                        $errors[] = $trans['discount_percent_required'];
                    } elseif (!$ETS_AM_SELL_APPLY_DISCOUNT_IN) {
                        $errors[] = $trans['discount_availability_required'];
                    }
                } elseif ($ETS_AM_SELL_APPLY_DISCOUNT == 'AMOUNT') {
                    $ETS_AM_SELL_REDUCTION_AMOUNT = (float)Tools::getValue('ETS_AM_SELL_REDUCTION_AMOUNT', false);
                    $ETS_AM_SELL_APPLY_DISCOUNT_IN = (float)Tools::getValue('ETS_AM_SELL_APPLY_DISCOUNT_IN', false);
                    if (!$ETS_AM_SELL_REDUCTION_AMOUNT) {
                        $errors[] = $trans['amount_required'];
                    } elseif (!$ETS_AM_SELL_APPLY_DISCOUNT_IN) {
                        $errors[] = $trans['discount_availability_required'];
                    }
                }
                $ETS_AM_SELL_QUANTITY = Tools::getValue('ETS_AM_SELL_QUANTITY');
                if (!$errors && $ETS_AM_SELL_QUANTITY == '')
                    $errors[] = $trans['voucher_sell_quantity_require'];
                elseif (!Validate::isInt($ETS_AM_SELL_QUANTITY) || $ETS_AM_SELL_QUANTITY <= 0)
                    $errors[] = $trans['voucher_sell_quantity_vaild'];
            }
        } elseif ($tab == 'affiliate_conditions') {
            $ETS_AM_AFF_ENABLED = (int)Tools::getValue('ETS_AM_AFF_ENABLED', false);
            if ($ETS_AM_AFF_ENABLED) {
                $ETS_AM_AFF_CAT_TYPE = Tools::getValue('ETS_AM_AFF_CAT_TYPE');
                if ($ETS_AM_AFF_CAT_TYPE == 'SPECIFIC') {
                    $ETS_AM_AFF_CATEGORIES = Tools::getValue('ETS_AM_AFF_CATEGORIES');
                    if (!$ETS_AM_AFF_CATEGORIES) {
                        $errors[] = $trans['categories_required'];
                    } elseif ($ETS_AM_AFF_CATEGORIES && !Ets_affiliatemarketing::validateArray($ETS_AM_AFF_CATEGORIES))
                        $errors[] = $trans['categories_valid'];
                }
            }
        } elseif ($tab == 'affiliate_reward_caculation') {
            $ETS_AM_AFF_HOW_TO_CALCULATE = Tools::getValue('ETS_AM_AFF_HOW_TO_CALCULATE');
            if ($ETS_AM_AFF_HOW_TO_CALCULATE == 'PERCENT') {
                $ETS_AM_AFF_DEFAULT_PERCENTAGE = (float)Tools::getValue('ETS_AM_AFF_DEFAULT_PERCENTAGE', false);
                if (!$ETS_AM_AFF_DEFAULT_PERCENTAGE) {
                    $errors[] = $trans['percentage_required'];
                }
            } elseif ($ETS_AM_AFF_HOW_TO_CALCULATE == 'FIXED') {
                $ETS_AM_AFF_DEFAULT_FIXED_AMOUNT = (float)Tools::getValue('ETS_AM_AFF_DEFAULT_FIXED_AMOUNT', false);
                if (!$ETS_AM_AFF_DEFAULT_FIXED_AMOUNT) {
                    $errors[] = $trans['amount_fixed_required'];
                }
            }
        } elseif ($tab == 'affiliate_voucher') {
            $ETS_AM_AFF_OFFER_VOUCHER = (int)Tools::getValue('ETS_AM_AFF_OFFER_VOUCHER', false);
            if ($ETS_AM_AFF_OFFER_VOUCHER) {
                $ETS_AM_AFF_VOUCHER_TYPE = Tools::getValue('ETS_AM_AFF_VOUCHER_TYPE');
                if ($ETS_AM_AFF_VOUCHER_TYPE == 'DYNAMIC') {
                    $ETS_AM_AFF_APPLY_DISCOUNT = Tools::getValue('ETS_AM_AFF_APPLY_DISCOUNT');
                    if ($ETS_AM_AFF_APPLY_DISCOUNT == 'PERCENT') {
                        $ETS_AM_AFF_REDUCTION_PERCENT = (float)Tools::getValue('ETS_AM_AFF_REDUCTION_PERCENT', false);
                        $ETS_AM_AFF_APPLY_DISCOUNT_IN = (float)Tools::getValue('ETS_AM_AFF_APPLY_DISCOUNT_IN', false);
                        if (!$ETS_AM_AFF_REDUCTION_PERCENT) {
                            $errors[] = $trans['discount_percent_required'];
                        } elseif (!$ETS_AM_AFF_APPLY_DISCOUNT_IN) {
                            $errors[] = $trans['discount_availability_required'];
                        }
                    } elseif ($ETS_AM_AFF_APPLY_DISCOUNT == 'AMOUNT') {
                        $ETS_AM_AFF_REDUCTION_AMOUNT = (float)Tools::getValue('ETS_AM_AFF_REDUCTION_AMOUNT', false);
                        if (!$ETS_AM_AFF_REDUCTION_AMOUNT) {
                            $errors[] = $trans['amount_required'];
                        }
                    }
                }
            }
        }
        return $errors;
    }
    public static function saveSponsorLevel()
    {
        $count = 2;
        $quit = false;
        while ($quit == false) {
            if (Configuration::hasKey('ETS_AM_REF_SPONSOR_COST_LEVEL_' . $count)) {
                $ETS_AM_REF_SPONSOR_COST_LEVEL = Tools::getValue('ETS_AM_REF_SPONSOR_COST_LEVEL_' . $count);
                if ($ETS_AM_REF_SPONSOR_COST_LEVEL === false) {
                    Configuration::deleteByName('ETS_AM_REF_SPONSOR_COST_LEVEL_' . $count);
                }
            } else {
                $quit = true;
                break;
            }
            $count++;
        }
        //Add new config
        $level_count = 2;
        $quit = false;
        while ($quit == false) {
            $level_data = Tools::getValue('ETS_AM_REF_SPONSOR_COST_LEVEL_' . $level_count);
            if ($level_data !== false && Validate::isUnsignedFloat($level_data)) {
                Configuration::updateValue('ETS_AM_REF_SPONSOR_COST_LEVEL_' . $level_count, $level_data);
            } else {
                $quit = true;
                break;
            }
            $level_count++;
        }
        return true;
    }
    /**
     * @param $key
     * @return bool|string
     */
    private function _uploadImage($key)
    {
        if (isset($_FILES[$key]) && $_FILES[$key]['tmp_name']) {
            $allowExtentions = array('png', 'jpg', 'jpeg', 'gif');
            $imagesize = @getimagesize($_FILES[$key]['tmp_name']);
            $ext = Tools::strtolower(Tools::substr(strrchr($_FILES[$key]['name'], '.'), 1));
            $ext2 = isset($imagesize['mime']) && $imagesize['mime'] ? Tools::strtolower(Tools::substr(strrchr($imagesize['mime'], '/'), 1)) : '';
            if ($_FILES[$key]['error'] <= 0 && in_array($ext, $allowExtentions) && in_array($ext2, $allowExtentions)) {
                $img_exists = Configuration::get($key);
                $tmp_name = microtime() . rand(1111, 99999) . $img_exists;
                if ($img_exists && file_exists(EAM_PATH_IMAGE_BANER . $img_exists)) {
                    Ets_affiliatemarketing::makeCacheDir();
                    rename(EAM_PATH_IMAGE_BANER . $img_exists, _PS_CACHE_DIR_ . 'ets_affiliatemarketing/' . $tmp_name);
                    @unlink(EAM_PATH_IMAGE_BANER . $img_exists);
                }
                $success = false;
                if (!ImageManager::validateUpload($_FILES[$key], 2097152)) {
                    $temp_name = tempnam(_PS_TMP_IMG_DIR_, 'PS');
                    if (move_uploaded_file($_FILES[$key]['tmp_name'], $temp_name)) {
                        Ets_AM::createPath(EAM_PATH_IMAGE_BANER);
                        $img_name = Tools::strtolower($key) . '.' . $ext;
                        $resize_with = null;
                        $resize_height = null;
                        if ($key == 'ETS_AM_REF_DEFAULT_BANNER') {
                            $img_name = 'default_banner' . '.' . $ext;
                            if ((int)Configuration::get('ETS_AM_RESIZE_BANNER')) {
                                $resize_with = (int)Configuration::get('ETS_AM_RESIZE_BANNER_WITH');
                                $resize_height = (int)Configuration::get('ETS_AM_RESIZE_BANNER_HEIGHT');
                            }
                        }
                        $path_img = EAM_PATH_IMAGE_BANER . $img_name;
                        if (ImageManager::resize($temp_name, $path_img, $resize_with, $resize_height, $ext)) {
                            $success = true;
                            if (isset($temp_name) && file_exists($temp_name)) {
                                @unlink($temp_name);
                            }
                            if (file_exists(_PS_CACHE_DIR_ . 'ets_affiliatemarketing/' . $tmp_name))
                                @unlink(_PS_CACHE_DIR_ . 'ets_affiliatemarketing/' . $tmp_name);
                            return $img_name;
                        }
                        if (isset($temp_name) && file_exists($temp_name)) {
                            @unlink($temp_name);
                        }
                    }
                }
                if (!$success && $img_exists && file_exists(_PS_CACHE_DIR_ . 'ets_affiliatemarketing/' . $tmp_name)) {
                    rename(_PS_CACHE_DIR_ . 'ets_affiliatemarketing/' . $tmp_name, EAM_PATH_IMAGE_BANER . $img_exists);
                    @unlink(_PS_CACHE_DIR_ . 'ets_affiliatemarketing/' . $tmp_name);
                    return $img_exists;
                }
                return false;
            }
        }
        return false;
    }
}