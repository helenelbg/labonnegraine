<?php

class ExportCustomer extends ObjectModel
{
    public $id_extension_export_customer;
    public $id_extension_export_customer_filter;
    public $id_extension_export_customer_mapping;
    public $id_lang;
    public $filename;
    public $token;
    public $date_last_export;
    public $date_add;
    public $date_upd;

    public static $definition = [
        'table' => SC_DB_PREFIX . 'extension_export_customer',
        'primary' => 'id_extension_export_customer',
        'fields' => [
            'id_extension_export_customer_filter' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId'],
            'id_extension_export_customer_mapping' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId'],
            'id_lang' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => true],
            'filename' => ['type' => self::TYPE_STRING, 'validate' => 'isFileName', 'required' => true],
            'token' => ['type' => self::TYPE_STRING, 'required' => true],
            'date_last_export' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],
            'date_add' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],
            'date_upd' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],
        ]
    ];

    public function __construct($id = null, $id_lang = null, $id_shop = null, $translator = null)
    {
        parent::__construct($id, $id_lang, $id_shop, $translator);

        if($this->date_last_export === '0000-00-00 00:00:00')
        {
            $this->date_last_export = null;
        }
    }

    public function add($auto_date = true, $null_values = false)
    {
        $this->token = generateToken();
        return parent::add($auto_date, $null_values); // TODO: Change the autogenerated stub
    }

    /**
     * @return array|false
     */
    public static function getExportList()
    {
        $query = new DbQuery();
        $query->select('*, IF(date_last_export <> "0000-00-00 00:00:00", date_last_export, NULL) as date_last_export');
        $query->from(self::$definition['table']);
        return Db::getInstance()->executeS($query);
    }

    /**
     * @return array|false
     */
    public static function getExportCronList()
    {
        $query = new DbQuery();
        $query->select('cuse.*, IF(cuse.date_last_export <> "0000-00-00 00:00:00", cuse.date_last_export, NULL) as date_last_export');
        $query->select('IF(cusf.name IS NOT NULL, cusf.name, "--") AS filter_name');
        $query->select('IF(cusm.name IS NOT NULL, cusm.name, "--") AS mapping_name');
        $query->select('UPPER(l.iso_code) as iso');
        $query->from(self::$definition['table'], 'cuse');
        $query->leftJoin(
            ExportCustomerFilter::$definition['table'],
            'cusf',
            'cusf.`'.ExportCustomerFilter::$definition['primary'].'` = cuse.`'.ExportCustomerFilter::$definition['primary'].'`'
        );
        $query->leftJoin(
            ExportCustomerMapping::$definition['table'],
            'cusm',
            'cusm.`'.ExportCustomerMapping::$definition['primary'].'` = cuse.`'.ExportCustomerMapping::$definition['primary'].'`'
        );
        $query->leftJoin(
            Language::$definition['table'],
            'l',
            'l.`'.Language::$definition['primary'].'` = cuse.`'.Language::$definition['primary'].'`'
        );
        return Db::getInstance()->executeS($query);
    }

    public function getFullFileName()
    {
        return $this->filename.'.csv';
    }

    public function getFullPathFile()
    {
        return SC_CSV_EXPORT_DIR . 'customers/' . $this->getFullFileName();
    }

    public static function getExportFiles()
    {
        return glob(SC_CSV_EXPORT_DIR.'customers/*.csv');
    }

    /**
     * @param $id_filter
     * @return array|false
     */
    public static function getExportByFilter($id_filter)
    {
        $query = new DbQuery();
        $query->select(self::$definition['primary']);
        $query->from(self::$definition['table']);
        $query->where(ExportCustomerFilter::$definition['primary'].' = '.(int)$id_filter);
        $exportList = Db::getInstance()->executeS($query);
        if($exportList)
        {
            return array_column($exportList, self::$definition['primary']);
        }
        return false;
    }

    /**
     * @param $id_mapping
     * @return array|false
     */
    public static function getExportByMapping($id_mapping)
    {
        $query = new DbQuery();
        $query->select(self::$definition['primary']);
        $query->from(self::$definition['table']);
        $query->where(ExportCustomerMapping::$definition['primary'].' = '.(int)$id_mapping);
        $exportList = Db::getInstance()->executeS($query);
        if($exportList)
        {
            return array_column($exportList, self::$definition['primary']);
        }
        return false;
    }


    /**
     * if FR => get FR data
     * else always EN
     * @param $id_lang
     * @return int
     */
    public static function getRightIdLang($id_lang)
    {
        $idFr = LanguageCore::getIdByIso("fr");
        return (int) ($id_lang == $idFr ? 2 : 1);
    }
}
